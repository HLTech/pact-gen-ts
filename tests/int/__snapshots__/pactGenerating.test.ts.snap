// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createPacts axios 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "getAxiosApiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "secondGetAxiosApiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "postAxiosApiFunction",
      "request": {
        "headers": {},
        "method": "POST",
        "path": "/api",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 201,
      },
    },
    {
      "description": "deleteAxiosApiFunction",
      "request": {
        "headers": {},
        "method": "DELETE",
        "path": "/api",
      },
      "response": {
        "headers": {},
        "status": 204,
      },
    },
    {
      "description": "getAxiosWithQueryApiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/query",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts basic 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "apiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts different-functions 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "standardFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/standard",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "arrowFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/arrow",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "arrowFunctionWithoutCurlyBraces",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/arrow/withoutCurlyBraces",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "objectPropertyFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/object/property/function",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "objectPropertyArrowFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/object/property/arrow",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "objectPropertyAssigmentFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/object/property/assigment-function",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "classMethodFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/class/method",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "classPropertyArrowFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/class/property/arrow",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "classPropertyAssigmentFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/class/property/assigment-function",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts handles "brackets" array format for query params 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "firstApiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/first",
        "query": "stringArray%5B%5D=text",
      },
      "response": {
        "headers": {},
        "status": 200,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts handles "comma" array format for query params 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "firstApiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/first",
        "query": "stringArray=text",
      },
      "response": {
        "headers": {},
        "status": 200,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts handles "indices" array format for query params 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "firstApiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/first",
        "query": "stringArray%5B0%5D=text",
      },
      "response": {
        "headers": {},
        "status": 200,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts handles "repeat" array format for query params 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "firstApiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/first",
        "query": "stringArray=text",
      },
      "response": {
        "headers": {},
        "status": 200,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts matching-rules 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "apiWithStringEnumResponseFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/one",
      },
      "response": {
        "body": "ONE",
        "headers": {},
        "matchingRules": {
          "$.body": {
            "match": "regex",
            "regex": "ONE|TWO|THREE",
          },
        },
        "status": 200,
      },
    },
    {
      "description": "apiWithAllMatchingRules",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/two",
      },
      "response": {
        "body": {
          "arrayOfEnums": [
            "ONE",
          ],
          "emailField": "email@example.com",
          "enumField": "ONE",
          "hexField": "3F",
          "ipv4Field": "127.0.0.13",
          "ipv6Field": "::ffff:192.0.2.128",
          "isoDateField": "2013-02-01",
          "isoDatetimeField": "2015-08-06T16:53:10+01:00",
          "isoDatetimeWithMillisField": "2015-08-06T16:53:10.123+01:00",
          "isoTimeField": "T22:44:30.652Z",
          "literalOptions": "AAA",
          "matcherWithExample1": "user@google.pl",
          "matcherWithExample2": "FFFFFF",
          "nestedObject": {
            "arrayOfEnums": [
              "ONE",
            ],
            "enumField": "ONE",
          },
          "timestampField": "Mon, 31 Oct 2016 15:21:14 -0400",
          "uuidField": "ce118b6e-d8e1-11e7-9296-cec278b6b50a",
        },
        "headers": {},
        "matchingRules": {
          "$.body": {
            "match": "type",
          },
          "$.body.arrayOfEnums": {
            "match": "regex",
            "regex": "ONE|TWO|THREE",
          },
          "$.body.emailField": {
            "match": "regex",
            "regex": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$",
          },
          "$.body.enumField": {
            "match": "regex",
            "regex": "ONE|TWO|THREE",
          },
          "$.body.hexField": {
            "match": "regex",
            "regex": "^[0-9a-fA-F]+$",
          },
          "$.body.ipv4Field": {
            "match": "regex",
            "regex": "^(\\d{1,3}\\.)+\\d{1,3}$",
          },
          "$.body.ipv6Field": {
            "match": "regex",
            "regex": "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$",
          },
          "$.body.isoDateField": {
            "match": "regex",
            "regex": "^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))?)$",
          },
          "$.body.isoDatetimeField": {
            "match": "regex",
            "regex": "^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)$",
          },
          "$.body.isoDatetimeWithMillisField": {
            "match": "regex",
            "regex": "^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d(:?[0-5]\\d)?|Z)$",
          },
          "$.body.isoTimeField": {
            "match": "regex",
            "regex": "^(T\\d\\d:\\d\\d(:\\d\\d)?(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?)?$",
          },
          "$.body.literalOptions": {
            "match": "regex",
            "regex": "AAA|BBB|CCC",
          },
          "$.body.matcherWithExample1": {
            "match": "regex",
            "regex": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$",
          },
          "$.body.matcherWithExample2": {
            "match": "regex",
            "regex": "^[0-9a-fA-F]+$",
          },
          "$.body.nestedObject.arrayOfEnums": {
            "match": "regex",
            "regex": "ONE|TWO|THREE",
          },
          "$.body.nestedObject.enumField": {
            "match": "regex",
            "regex": "ONE|TWO|THREE",
          },
          "$.body.timestampField": {
            "match": "regex",
            "regex": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s\\d{2}\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s\\d{4}\\s\\d{2}:\\d{2}:\\d{2}\\s(\\+|-)\\d{4}$",
          },
          "$.body.uuidField": {
            "match": "regex",
            "regex": "^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$",
          },
        },
        "status": 200,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts pact-axios 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "getPactAxiosSingleQuoteArgumentPathApiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/clients",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "getPactAxiosDoubleQuoteArgumentPathApiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/clients",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "getPactAxiosTemplateStringArgumentPathApiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/clients",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "getPactAxiosArgumentPathFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/clients/10/posts",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "getPactAxiosTemplateStringPathFunction",
      "request": {
        "headers": {},
        "method": "DELETE",
        "path": "/api/client/1/application/1",
      },
      "response": {
        "headers": {},
        "status": 204,
      },
    },
    {
      "description": "getPactAxiosVariablePathFunction",
      "request": {
        "headers": {},
        "method": "DELETE",
        "path": "/api/applications",
      },
      "response": {
        "headers": {},
        "status": 204,
      },
    },
    {
      "description": "getPactAxiosVariableConcatPathFunction",
      "request": {
        "headers": {},
        "method": "DELETE",
        "path": "/api/applications",
      },
      "response": {
        "headers": {},
        "status": 204,
      },
    },
    {
      "description": "getPactAxiosVariableConcatPathWithVariableFunction",
      "request": {
        "headers": {},
        "method": "DELETE",
        "path": "/api/text",
      },
      "response": {
        "headers": {},
        "status": 204,
      },
    },
    {
      "description": "getPactAxiosVariableTemplateStringPathFunction",
      "request": {
        "headers": {},
        "method": "DELETE",
        "path": "/api/client/1/application/1",
      },
      "response": {
        "headers": {},
        "status": 204,
      },
    },
    {
      "description": "getPactAxiosConcatenatedPathFunction",
      "request": {
        "headers": {},
        "method": "DELETE",
        "path": "/api/client/1",
      },
      "response": {
        "headers": {},
        "status": 204,
      },
    },
    {
      "description": "getPactAxiosPathOverrideApiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/override",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "getPactAxiosApiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "customAxiosInstancePactAxiosApiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api",
      },
      "response": {
        "body": {
          "numberField": 10,
          "stringField": "text",
        },
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "postPactAxiosApiFunction",
      "request": {
        "body": {
          "numberField": 10,
          "stringField": "text",
        },
        "headers": {},
        "method": "POST",
        "path": "/api",
      },
      "response": {
        "headers": {},
        "status": 201,
      },
    },
    {
      "description": "putPactAxiosApiFunction",
      "request": {
        "body": {
          "numberField": 10,
          "stringField": "text",
        },
        "headers": {},
        "method": "PUT",
        "path": "/api",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "patchPactAxiosApiFunction",
      "request": {
        "body": {
          "numberField": 10,
          "stringField": "text",
        },
        "headers": {},
        "method": "PATCH",
        "path": "/api",
      },
      "response": {
        "headers": {},
        "status": 204,
      },
    },
    {
      "description": "deletePactAxiosApiFunction",
      "request": {
        "headers": {},
        "method": "DELETE",
        "path": "/api",
      },
      "response": {
        "headers": {},
        "status": 204,
      },
    },
    {
      "description": "getPactAxiosWithQueryApiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api/query",
        "query": "page=10&limit=10",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "getPactAxiosWithDataAndQueryApiFunction",
      "request": {
        "body": {
          "postId": "text",
        },
        "headers": {},
        "method": "POST",
        "path": "/api/post",
        "query": "page=10&limit=10",
      },
      "response": {
        "body": "text",
        "headers": {},
        "status": 201,
      },
    },
    {
      "description": "getPactAxiosWithDataConfigApiFunction",
      "request": {
        "body": {
          "id": "text",
        },
        "headers": {},
        "method": "DELETE",
        "path": "/api",
      },
      "response": {
        "headers": {},
        "status": 204,
      },
    },
    {
      "description": "getPactAxiosClassMethod",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/posts",
        "query": "select=text",
      },
      "response": {
        "body": [
          {
            "id": "text",
          },
        ],
        "headers": {},
        "status": 200,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts pact-example 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "apiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api",
      },
      "response": {
        "body": {
          "field1": "example",
          "field2": "example",
          "field3": 99,
          "field4": "99-400",
        },
        "headers": {},
        "status": 200,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts pact-function-annotations 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": ""description of interaction"",
      "request": {
        "headers": {
          "authorization": "auth",
        },
        "method": "POST",
        "path": "/api",
      },
      "response": {
        "body": {},
        "headers": {
          "Content-Type": "application/pdf",
        },
        "status": 201,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts pact-matcher 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "apiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api",
      },
      "response": {
        "body": {
          "emailField": "email@example.com",
          "hexField": "3F",
          "ipv4Field": "127.0.0.13",
          "ipv6Field": "::ffff:192.0.2.128",
          "isoDateField": "2013-02-01",
          "isoDatetimeField": "2015-08-06T16:53:10+01:00",
          "isoDatetimeWithMillisField": "2015-08-06T16:53:10.123+01:00",
          "isoTimeField": "T22:44:30.652Z",
          "matcherWithExample1": "user@google.pl",
          "matcherWithExample2": "FFFFFF",
          "timestampField": "Mon, 31 Oct 2016 15:21:14 -0400",
          "uuidField": "ce118b6e-d8e1-11e7-9296-cec278b6b50a",
        },
        "headers": {},
        "matchingRules": {
          "$.body": {
            "match": "type",
          },
          "$.body.emailField": {
            "match": "regex",
            "regex": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$",
          },
          "$.body.hexField": {
            "match": "regex",
            "regex": "^[0-9a-fA-F]+$",
          },
          "$.body.ipv4Field": {
            "match": "regex",
            "regex": "^(\\d{1,3}\\.)+\\d{1,3}$",
          },
          "$.body.ipv6Field": {
            "match": "regex",
            "regex": "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$",
          },
          "$.body.isoDateField": {
            "match": "regex",
            "regex": "^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))?)$",
          },
          "$.body.isoDatetimeField": {
            "match": "regex",
            "regex": "^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)$",
          },
          "$.body.isoDatetimeWithMillisField": {
            "match": "regex",
            "regex": "^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d(:?[0-5]\\d)?|Z)$",
          },
          "$.body.isoTimeField": {
            "match": "regex",
            "regex": "^(T\\d\\d:\\d\\d(:\\d\\d)?(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?)?$",
          },
          "$.body.matcherWithExample1": {
            "match": "regex",
            "regex": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$",
          },
          "$.body.matcherWithExample2": {
            "match": "regex",
            "regex": "^[0-9a-fA-F]+$",
          },
          "$.body.timestampField": {
            "match": "regex",
            "regex": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s\\d{2}\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s\\d{4}\\s\\d{2}:\\d{2}:\\d{2}\\s(\\+|-)\\d{4}$",
          },
          "$.body.uuidField": {
            "match": "regex",
            "regex": "^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$",
          },
        },
        "status": 200,
      },
    },
    {
      "description": "apiFunctionNestedInline",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api",
      },
      "response": {
        "body": {
          "arrayInline": [
            {
              "matcher": "3F",
              "nestedArray": [
                {
                  "innerMatcher": "3F",
                },
              ],
              "nestedObject": {
                "innerMatcher": "3F",
              },
            },
          ],
          "objectInline": {
            "matcher": "3F",
            "nestedArray": [
              {
                "innerMatcher": "3F",
              },
            ],
            "nestedObject": {
              "innerMatcher": "3F",
            },
          },
        },
        "headers": {},
        "matchingRules": {
          "$.body": {
            "match": "type",
          },
          "$.body.arrayInline.matcher": {
            "match": "regex",
            "regex": "^[0-9a-fA-F]+$",
          },
          "$.body.arrayInline.nestedArray.innerMatcher": {
            "match": "regex",
            "regex": "^[0-9a-fA-F]+$",
          },
          "$.body.arrayInline.nestedObject.innerMatcher": {
            "match": "regex",
            "regex": "^[0-9a-fA-F]+$",
          },
          "$.body.objectInline.matcher": {
            "match": "regex",
            "regex": "^[0-9a-fA-F]+$",
          },
          "$.body.objectInline.nestedArray.innerMatcher": {
            "match": "regex",
            "regex": "^[0-9a-fA-F]+$",
          },
          "$.body.objectInline.nestedObject.innerMatcher": {
            "match": "regex",
            "regex": "^[0-9a-fA-F]+$",
          },
        },
        "status": 200,
      },
    },
    {
      "description": "apiFunctionNested",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api",
      },
      "response": {
        "body": {
          "array": [
            {
              "emailField": "email@example.com",
            },
          ],
          "arrayNested": [
            {
              "nestedArray": [
                {
                  "emailField": "email@example.com",
                },
              ],
              "nestedObject": {
                "emailField": "email@example.com",
              },
            },
          ],
          "object": {
            "emailField": "email@example.com",
          },
          "objectNested": {
            "nestedArray": [
              {
                "emailField": "email@example.com",
              },
            ],
            "nestedObject": {
              "emailField": "email@example.com",
            },
          },
        },
        "headers": {},
        "matchingRules": {
          "$.body": {
            "match": "type",
          },
          "$.body.array.emailField": {
            "match": "regex",
            "regex": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$",
          },
          "$.body.arrayNested.nestedArray.emailField": {
            "match": "regex",
            "regex": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$",
          },
          "$.body.arrayNested.nestedObject.emailField": {
            "match": "regex",
            "regex": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$",
          },
          "$.body.object.emailField": {
            "match": "regex",
            "regex": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$",
          },
          "$.body.objectNested.nestedArray.emailField": {
            "match": "regex",
            "regex": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$",
          },
          "$.body.objectNested.nestedObject.emailField": {
            "match": "regex",
            "regex": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$",
          },
        },
        "status": 200,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts pact-query 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "firstApiFunction",
      "request": {
        "headers": {},
        "matchingRules": {
          "$.query": {
            "match": "type",
          },
          "$.query.enumType": {
            "match": "regex",
            "regex": "FIRST|SECOND|THIRD|OTHER",
          },
          "$.query.isoDateField": {
            "match": "regex",
            "regex": "^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))?)$",
          },
          "$.query.isoDatetimeWithMillisField": {
            "match": "regex",
            "regex": "^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d(:?[0-5]\\d)?|Z)$",
          },
          "$.query.someUnionType": {
            "match": "regex",
            "regex": "AAA|BBB|100",
          },
        },
        "method": "GET",
        "path": "/api/first",
        "query": "stringField=text&numberField=10&booleanField=true&someObject%5BbooleanField%5D=true&someObject%5BnumberField%5D=10&someUnionType=AAA&enumType=FIRST&stringArray%5B%5D=text&isoDateField=2013-02-01&isoDatetimeWithMillisField=2015-08-06T16%3A53%3A10.123%2B01%3A00",
      },
      "response": {
        "headers": {},
        "status": 200,
      },
    },
    {
      "description": "secondApiFunction",
      "request": {
        "headers": {},
        "matchingRules": {
          "$.query": {
            "match": "type",
          },
          "$.query.enumType": {
            "match": "regex",
            "regex": "FIRST|SECOND|THIRD|OTHER",
          },
          "$.query.isoDateField": {
            "match": "regex",
            "regex": "^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))?)$",
          },
          "$.query.isoDatetimeWithMillisField": {
            "match": "regex",
            "regex": "^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d(:?[0-5]\\d)?|Z)$",
          },
          "$.query.someUnionType": {
            "match": "regex",
            "regex": "AAA|BBB|100",
          },
        },
        "method": "GET",
        "path": "/api/second",
        "query": "stringField=text&numberField=10&booleanField=true&someObject%5BbooleanField%5D=true&someObject%5BnumberField%5D=10&someUnionType=AAA&enumType=FIRST&stringArray%5B%5D=text&isoDateField=2013-02-01&isoDatetimeWithMillisField=2015-08-06T16%3A53%3A10.123%2B01%3A00",
      },
      "response": {
        "headers": {},
        "status": 200,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts pact-request-body 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "firstApiFunction",
      "request": {
        "body": {
          "numberField": 10,
          "stringField": "text",
        },
        "headers": {},
        "method": "POST",
        "path": "/api/first",
      },
      "response": {
        "headers": {},
        "status": 201,
      },
    },
    {
      "description": "secondApiFunction",
      "request": {
        "body": {
          "numberField": 10,
          "stringField": "text",
        },
        "headers": {},
        "method": "POST",
        "path": "/api/second",
      },
      "response": {
        "headers": {},
        "status": 201,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts pact-response-body 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "apiFunction",
      "request": {
        "headers": {},
        "method": "GET",
        "path": "/api",
      },
      "response": {
        "body": {
          "numberField": 10,
          "stringField": "text",
        },
        "headers": {},
        "status": 200,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;

exports[`createPacts type-analysis 1`] = `
{
  "consumer": {
    "name": "consumer-name",
  },
  "interactions": [
    {
      "description": "apiFunction",
      "request": {
        "body": {
          "arrayOfObjects": [
            {
              "someField": "A",
            },
          ],
          "booleanField": true,
          "constString": "CONST",
          "enumType": "FIRST",
          "intersectionField": {
            "fieldA": "text",
            "fieldB": true,
            "fieldC": 10,
          },
          "numberEnum": 1,
          "numberField": 10,
          "optionalConstString": "CONST",
          "someAdditionalField": "text",
          "someObject": {
            "booleanField": true,
            "numberField": 10,
          },
          "someOtherObject": {
            "someInnerObject": {
              "someNextEnum": "FIRST",
            },
          },
          "someType": {
            "fieldA": "text",
            "fieldB": true,
          },
          "someUnionType": "AAA",
          "stringAliasType": "text",
          "stringArray": [
            "text",
          ],
          "stringField": "text",
          "unionWithDifferentTypes": "text",
          "unionsArray": [
            "OPTION_1",
          ],
        },
        "headers": {},
        "matchingRules": {
          "$.body": {
            "match": "type",
          },
          "$.body.arrayOfObjects.someField": {
            "match": "regex",
            "regex": "A|B|C",
          },
          "$.body.constString": {
            "match": "regex",
            "regex": "CONST",
          },
          "$.body.enumType": {
            "match": "regex",
            "regex": "FIRST|SECOND|THIRD|OTHER",
          },
          "$.body.numberEnum": {
            "match": "regex",
            "regex": "1|2|3|7|8",
          },
          "$.body.optionalConstString": {
            "match": "regex",
            "regex": "CONST",
          },
          "$.body.someOtherObject.someInnerObject.someNextEnum": {
            "match": "regex",
            "regex": "FIRST|SECOND|THIRD|OTHER",
          },
          "$.body.someUnionType": {
            "match": "regex",
            "regex": "AAA|BBB|100",
          },
          "$.body.unionsArray": {
            "match": "regex",
            "regex": "OPTION_1|OPTION_2|OPTION_3",
          },
        },
        "method": "POST",
        "path": "/api",
      },
      "response": {
        "body": {
          "arrayOfObjects": [
            {
              "someField": "A",
            },
          ],
          "booleanField": true,
          "constString": "CONST",
          "enumType": "FIRST",
          "intersectionField": {
            "fieldA": "text",
            "fieldB": true,
            "fieldC": 10,
          },
          "numberEnum": 1,
          "numberField": 10,
          "optionalConstString": "CONST",
          "someObject": {
            "booleanField": true,
            "numberField": 10,
          },
          "someOtherObject": {
            "someInnerObject": {
              "someNextEnum": "FIRST",
            },
          },
          "someType": {
            "fieldA": "text",
            "fieldB": true,
          },
          "someUnionType": "AAA",
          "stringAliasType": "text",
          "stringArray": [
            "text",
          ],
          "stringField": "text",
          "unionWithDifferentTypes": "text",
          "unionsArray": [
            "OPTION_1",
          ],
        },
        "headers": {},
        "matchingRules": {
          "$.body": {
            "match": "type",
          },
          "$.body.arrayOfObjects.someField": {
            "match": "regex",
            "regex": "A|B|C",
          },
          "$.body.constString": {
            "match": "regex",
            "regex": "CONST",
          },
          "$.body.enumType": {
            "match": "regex",
            "regex": "FIRST|SECOND|THIRD|OTHER",
          },
          "$.body.numberEnum": {
            "match": "regex",
            "regex": "1|2|3|7|8",
          },
          "$.body.optionalConstString": {
            "match": "regex",
            "regex": "CONST",
          },
          "$.body.someOtherObject.someInnerObject.someNextEnum": {
            "match": "regex",
            "regex": "FIRST|SECOND|THIRD|OTHER",
          },
          "$.body.someUnionType": {
            "match": "regex",
            "regex": "AAA|BBB|100",
          },
          "$.body.unionsArray": {
            "match": "regex",
            "regex": "OPTION_1|OPTION_2|OPTION_3",
          },
        },
        "status": 201,
      },
    },
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0",
    },
  },
  "provider": {
    "name": "provider-name",
  },
}
`;
